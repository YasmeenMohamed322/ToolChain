
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000318  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000448  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000448  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000001c  0800046c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800046c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b75  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000283  00000000  00000000  00020bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000f0  00000000  00000000  00020e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00020f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000e1c  00000000  00000000  00020fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000003c7  00000000  00000000  00021e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003ba8  00000000  00000000  000221cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00025d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d4  00000000  00000000  00025df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000430 	.word	0x08000430

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08000430 	.word	0x08000430

08000170 <GPIO_enuInit>:
#include "../Inc/GPIO_Priv.h"

GPIO_REG* GPIO_PORT[GPIO_PERIPHERAL_NUM]={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF,GPIOG};

ES_t GPIO_enuInit(const PinConfig_t* PinConfig)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrorStates = ES_NOK;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]

	if(PinConfig != NULL)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f000 8087 	beq.w	8000292 <GPIO_enuInit+0x122>
	{
		if((PinConfig->Port) <= PORTG)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b06      	cmp	r3, #6
 800018a:	d87f      	bhi.n	800028c <GPIO_enuInit+0x11c>
		{
			if((PinConfig->PinNum) >= PIN0 && (PinConfig->PinNum) <= PIN15 )
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	785b      	ldrb	r3, [r3, #1]
 8000190:	2b0f      	cmp	r3, #15
 8000192:	d878      	bhi.n	8000286 <GPIO_enuInit+0x116>
			{
					if((PinConfig->PinDirection) == INPUT)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	789b      	ldrb	r3, [r3, #2]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d136      	bne.n	800020a <GPIO_enuInit+0x9a>
					{
						u8 Local_u8RegNum = (PinConfig -> PinNum) / 8;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	785b      	ldrb	r3, [r3, #1]
 80001a0:	08db      	lsrs	r3, r3, #3
 80001a2:	737b      	strb	r3, [r7, #13]
						GPIO_PORT[PinConfig->Port]->GPIO_CR[Local_u8RegNum] &= ~ (0b1111<<((PinConfig->PinNum) * 4));
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <GPIO_enuInit+0x134>)
 80001ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001b0:	7b7a      	ldrb	r2, [r7, #13]
 80001b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	785b      	ldrb	r3, [r3, #1]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	220f      	movs	r2, #15
 80001be:	fa02 f303 	lsl.w	r3, r2, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	4618      	mov	r0, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b35      	ldr	r3, [pc, #212]	; (80002a4 <GPIO_enuInit+0x134>)
 80001ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	4001      	ands	r1, r0
 80001d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						GPIO_PORT[PinConfig->Port]->GPIO_CR[Local_u8RegNum] = (PinConfig->INConfig | PinConfig->Mode) << (((PinConfig->PinNum) %8) * 4);
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	791a      	ldrb	r2, [r3, #4]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	78db      	ldrb	r3, [r3, #3]
 80001e2:	4313      	orrs	r3, r2
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	461a      	mov	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	785b      	ldrb	r3, [r3, #1]
 80001ec:	f003 0307 	and.w	r3, r3, #7
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	fa02 f103 	lsl.w	r1, r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <GPIO_enuInit+0x134>)
 80001fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000202:	7b7a      	ldrb	r2, [r7, #13]
 8000204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000208:	e045      	b.n	8000296 <GPIO_enuInit+0x126>
					}
				   else if(PinConfig -> PinDirection == OUTPUT)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	789b      	ldrb	r3, [r3, #2]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d136      	bne.n	8000280 <GPIO_enuInit+0x110>
					{
					   u8 Local_u8RegNum = (PinConfig -> PinNum) / 8;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	08db      	lsrs	r3, r3, #3
 8000218:	73bb      	strb	r3, [r7, #14]
						GPIO_PORT[PinConfig->Port]->GPIO_CR[Local_u8RegNum] &= ~ (0b1111<<(PinConfig -> PinNum * 4));
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	461a      	mov	r2, r3
 8000220:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <GPIO_enuInit+0x134>)
 8000222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000226:	7bba      	ldrb	r2, [r7, #14]
 8000228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	785b      	ldrb	r3, [r3, #1]
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	220f      	movs	r2, #15
 8000234:	fa02 f303 	lsl.w	r3, r2, r3
 8000238:	43db      	mvns	r3, r3
 800023a:	4618      	mov	r0, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	461a      	mov	r2, r3
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <GPIO_enuInit+0x134>)
 8000244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000248:	7bba      	ldrb	r2, [r7, #14]
 800024a:	4001      	ands	r1, r0
 800024c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						GPIO_PORT[PinConfig->Port]->GPIO_CR[Local_u8RegNum] = (PinConfig->OUTConfig | ( (PinConfig->Mode) << 2)) << (((PinConfig->PinNum) %8) * 4);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	795b      	ldrb	r3, [r3, #5]
 8000254:	461a      	mov	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	78db      	ldrb	r3, [r3, #3]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	431a      	orrs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	785b      	ldrb	r3, [r3, #1]
 8000262:	f003 0307 	and.w	r3, r3, #7
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	fa02 f103 	lsl.w	r1, r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <GPIO_enuInit+0x134>)
 8000274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000278:	7bba      	ldrb	r2, [r7, #14]
 800027a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800027e:	e00a      	b.n	8000296 <GPIO_enuInit+0x126>
					}
				   else
				   {
					   Local_enuErrorStates = ES_OUT_OF_RANGE;
 8000280:	2303      	movs	r3, #3
 8000282:	73fb      	strb	r3, [r7, #15]
 8000284:	e007      	b.n	8000296 <GPIO_enuInit+0x126>
				   }
			}
			else
			{
				Local_enuErrorStates = ES_OUT_OF_RANGE;
 8000286:	2303      	movs	r3, #3
 8000288:	73fb      	strb	r3, [r7, #15]
 800028a:	e004      	b.n	8000296 <GPIO_enuInit+0x126>
			}
		}
		else
		{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
 800028c:	2303      	movs	r3, #3
 800028e:	73fb      	strb	r3, [r7, #15]
 8000290:	e001      	b.n	8000296 <GPIO_enuInit+0x126>
		}
	}
	else
	{
		Local_enuErrorStates = ES_NULL_POINTER;
 8000292:	2302      	movs	r3, #2
 8000294:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorStates;
 8000296:	7bfb      	ldrb	r3, [r7, #15]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3714      	adds	r7, #20
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000000 	.word	0x20000000

080002a8 <GPIO_enuSetPinValue>:
ES_t GPIO_enuSetPinValue(Port_t Port,Pin_t Pin,PinValue_t PinValue)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	460b      	mov	r3, r1
 80002b4:	71bb      	strb	r3, [r7, #6]
 80002b6:	4613      	mov	r3, r2
 80002b8:	717b      	strb	r3, [r7, #5]
	ES_t Local_enuErrorStates = ES_NOK;
 80002ba:	2300      	movs	r3, #0
 80002bc:	73fb      	strb	r3, [r7, #15]

	if(Port <= PORTG)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	d827      	bhi.n	8000314 <GPIO_enuSetPinValue+0x6c>
	{
		if((Pin >= PIN0) && (Pin <= PIN15))
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b0f      	cmp	r3, #15
 80002c8:	d821      	bhi.n	800030e <GPIO_enuSetPinValue+0x66>
		{
			GPIO_PORT[Port]->GPIO_ODR &= ~(1<<Pin);
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4a15      	ldr	r2, [pc, #84]	; (8000324 <GPIO_enuSetPinValue+0x7c>)
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	68da      	ldr	r2, [r3, #12]
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	2101      	movs	r1, #1
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	43db      	mvns	r3, r3
 80002de:	4618      	mov	r0, r3
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4910      	ldr	r1, [pc, #64]	; (8000324 <GPIO_enuSetPinValue+0x7c>)
 80002e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e8:	4002      	ands	r2, r0
 80002ea:	60da      	str	r2, [r3, #12]

			GPIO_PORT[Port]->GPIO_ODR |= (PinValue << Pin);
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <GPIO_enuSetPinValue+0x7c>)
 80002f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f4:	68da      	ldr	r2, [r3, #12]
 80002f6:	7979      	ldrb	r1, [r7, #5]
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4908      	ldr	r1, [pc, #32]	; (8000324 <GPIO_enuSetPinValue+0x7c>)
 8000304:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000308:	4302      	orrs	r2, r0
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	e004      	b.n	8000318 <GPIO_enuSetPinValue+0x70>
		}
		else
		{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
 800030e:	2303      	movs	r3, #3
 8000310:	73fb      	strb	r3, [r7, #15]
 8000312:	e001      	b.n	8000318 <GPIO_enuSetPinValue+0x70>
		}
	}
	else
	{
		Local_enuErrorStates = ES_OUT_OF_RANGE;
 8000314:	2303      	movs	r3, #3
 8000316:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrorStates;
 8000318:	7bfb      	ldrb	r3, [r7, #15]
}
 800031a:	4618      	mov	r0, r3
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	20000000 	.word	0x20000000

08000328 <RCC_enuAPB2_EnableClock>:

	return Local_enuErrorState;
}

ES_t RCC_enuAPB2_EnableClock(u8 copy_u8APB2Peripheral)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrorState = ES_NOK;
 8000332:	2300      	movs	r3, #0
 8000334:	73fb      	strb	r3, [r7, #15]

	RCC -> RCC_APB2ENR |= (RCC_MASKBIT << copy_u8APB2Peripheral);
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <RCC_enuAPB2_EnableClock+0x30>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <RCC_enuAPB2_EnableClock+0x30>)
 8000346:	430b      	orrs	r3, r1
 8000348:	6193      	str	r3, [r2, #24]

	return Local_enuErrorState;
 800034a:	7bfb      	ldrb	r3, [r7, #15]
}
 800034c:	4618      	mov	r0, r3
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <main>:

#include "../Inc/RCC_int.h"
#include "../Inc/GPIO_int.h"

int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
    /* Loop forever */
	PinConfig_t Port = {
 8000362:	463b      	mov	r3, r7
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	809a      	strh	r2, [r3, #4]
 800036a:	2301      	movs	r3, #1
 800036c:	703b      	strb	r3, [r7, #0]
 800036e:	2304      	movs	r3, #4
 8000370:	707b      	strb	r3, [r7, #1]
 8000372:	2301      	movs	r3, #1
 8000374:	70bb      	strb	r3, [r7, #2]
 8000376:	2302      	movs	r3, #2
 8000378:	713b      	strb	r3, [r7, #4]
			.PinNum=PIN4,
			.PinDirection=OUTPUT,
			.INConfig = IN_PULLUP_PULLDOWN,
			.OUTConfig = PUSH_PULL,
	};
	RCC_enuAPB2_EnableClock(IOPB);
 800037a:	2003      	movs	r0, #3
 800037c:	f7ff ffd4 	bl	8000328 <RCC_enuAPB2_EnableClock>

	GPIO_enuInit(&Port);
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff fef4 	bl	8000170 <GPIO_enuInit>
	GPIO_enuSetPinValue(PORTB,PIN4,PIN_LOW);
 8000388:	2200      	movs	r2, #0
 800038a:	2104      	movs	r1, #4
 800038c:	2001      	movs	r0, #1
 800038e:	f7ff ff8b 	bl	80002a8 <GPIO_enuSetPinValue>

	for(;;)
 8000392:	e7fe      	b.n	8000392 <main+0x36>

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	; (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	; (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 f811 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ffc9 	bl	800035c <main>

080003ca <LoopForever>:

LoopForever:
    b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80003d8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003dc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80003e0:	20000038 	.word	0x20000038

080003e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC1_2_IRQHandler>
	...

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	2500      	movs	r5, #0
 80003ec:	4e0c      	ldr	r6, [pc, #48]	; (8000420 <__libc_init_array+0x38>)
 80003ee:	4c0d      	ldr	r4, [pc, #52]	; (8000424 <__libc_init_array+0x3c>)
 80003f0:	1ba4      	subs	r4, r4, r6
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	f000 f81a 	bl	8000430 <_init>
 80003fc:	2500      	movs	r5, #0
 80003fe:	4e0a      	ldr	r6, [pc, #40]	; (8000428 <__libc_init_array+0x40>)
 8000400:	4c0a      	ldr	r4, [pc, #40]	; (800042c <__libc_init_array+0x44>)
 8000402:	1ba4      	subs	r4, r4, r6
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	42a5      	cmp	r5, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000410:	4798      	blx	r3
 8000412:	3501      	adds	r5, #1
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800041a:	4798      	blx	r3
 800041c:	3501      	adds	r5, #1
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
